[0m[1mmodule.gateqeeper.google_storage_bucket.my-bucket: Refreshing state... [id=my-storage-bucket-dev][0m
[0m[1mdata.google_service_account_access_token.terraform: Reading...[0m[0m
[0m[1mdata.google_client_config.terraform: Reading...[0m[0m
[0m[1mdata.google_client_config.terraform: Read complete after 0s [id=projects/my-project-1575722702982/regions//zones/][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform planned the following actions, but then encountered a problem:

[1m  # module.gateqeeper.google_bigquery_dataset.bq_analytics_dataset[0m will be created
[0m  [32m+[0m[0m resource "google_bigquery_dataset" "bq_analytics_dataset" {
      [32m+[0m[0m creation_time              = (known after apply)
      [32m+[0m[0m dataset_id                 = "bq_dataset"
      [32m+[0m[0m delete_contents_on_destroy = false
      [32m+[0m[0m etag                       = (known after apply)
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m labels                     = (known after apply)
      [32m+[0m[0m last_modified_time         = (known after apply)
      [32m+[0m[0m location                   = "us-central1"
      [32m+[0m[0m project                    = "my-project-1575722702982"
      [32m+[0m[0m self_link                  = (known after apply)
    }

[1m  # module.gateqeeper.google_compute_firewall.firewall-rule[0m will be created
[0m  [32m+[0m[0m resource "google_compute_firewall" "firewall-rule" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m destination_ranges = (known after apply)
      [32m+[0m[0m direction          = "INGRESS"
      [32m+[0m[0m enable_logging     = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "firewall-rule"
      [32m+[0m[0m network            = (known after apply)
      [32m+[0m[0m priority           = 1000
      [32m+[0m[0m project            = (known after apply)
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m source_ranges      = [
          [32m+[0m[0m "34.171.218.201/32",
          [32m+[0m[0m "35.238.137.5/32",
        ]
      [32m+[0m[0m target_tags        = [
          [32m+[0m[0m "gateqeeper",
          [32m+[0m[0m "http",
          [32m+[0m[0m "https",
        ]

      [32m+[0m[0m allow {
          [32m+[0m[0m ports    = [
              [32m+[0m[0m "22",
              [32m+[0m[0m "443",
              [32m+[0m[0m "8080",
              [32m+[0m[0m "7777",
              [32m+[0m[0m "5090",
              [32m+[0m[0m "5061",
              [32m+[0m[0m "8083",
              [32m+[0m[0m "8088",
              [32m+[0m[0m "8883",
              [32m+[0m[0m "8000",
              [32m+[0m[0m "8080",
              [32m+[0m[0m "8089",
              [32m+[0m[0m "6379",
              [32m+[0m[0m "3306",
              [32m+[0m[0m "1883",
              [32m+[0m[0m "3000",
              [32m+[0m[0m "443",
              [32m+[0m[0m "80",
              [32m+[0m[0m "9000",
            ]
          [32m+[0m[0m protocol = "tcp"
        }
      [32m+[0m[0m allow {
          [32m+[0m[0m ports    = [
              [32m+[0m[0m "5000-60000",
            ]
          [32m+[0m[0m protocol = "udp"
        }

      [32m+[0m[0m log_config {
          [32m+[0m[0m metadata = "INCLUDE_ALL_METADATA"
        }
    }

[1m  # module.gateqeeper.google_compute_firewall.ssh[0m will be created
[0m  [32m+[0m[0m resource "google_compute_firewall" "ssh" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m destination_ranges = (known after apply)
      [32m+[0m[0m direction          = "INGRESS"
      [32m+[0m[0m enable_logging     = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "allow-ssh"
      [32m+[0m[0m network            = (known after apply)
      [32m+[0m[0m priority           = 1000
      [32m+[0m[0m project            = (known after apply)
      [32m+[0m[0m self_link          = (known after apply)
      [32m+[0m[0m source_ranges      = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m target_tags        = [
          [32m+[0m[0m "vm",
        ]

      [32m+[0m[0m allow {
          [32m+[0m[0m ports    = [
              [32m+[0m[0m "22",
            ]
          [32m+[0m[0m protocol = "tcp"
        }
    }

[1m  # module.gateqeeper.google_compute_global_address.private_ip_address[0m will be created
[0m  [32m+[0m[0m resource "google_compute_global_address" "private_ip_address" {
      [32m+[0m[0m address            = (known after apply)
      [32m+[0m[0m address_type       = "INTERNAL"
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "ip-for-nat"
      [32m+[0m[0m network            = (known after apply)
      [32m+[0m[0m prefix_length      = 24
      [32m+[0m[0m project            = "my-project-1575722702982"
      [32m+[0m[0m purpose            = "VPC_PEERING"
      [32m+[0m[0m self_link          = (known after apply)
    }

[1m  # module.gateqeeper.google_compute_instance.vm-instance[0m will be created
[0m  [32m+[0m[0m resource "google_compute_instance" "vm-instance" {
      [32m+[0m[0m can_ip_forward       = false
      [32m+[0m[0m cpu_platform         = (known after apply)
      [32m+[0m[0m current_status       = (known after apply)
      [32m+[0m[0m deletion_protection  = false
      [32m+[0m[0m guest_accelerator    = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance_id          = (known after apply)
      [32m+[0m[0m label_fingerprint    = (known after apply)
      [32m+[0m[0m machine_type         = "f1-micro"
      [32m+[0m[0m metadata_fingerprint = (known after apply)
      [32m+[0m[0m min_cpu_platform     = (known after apply)
      [32m+[0m[0m name                 = "terraform-vm"
      [32m+[0m[0m project              = (known after apply)
      [32m+[0m[0m self_link            = (known after apply)
      [32m+[0m[0m tags                 = [
          [32m+[0m[0m "vm",
        ]
      [32m+[0m[0m tags_fingerprint     = (known after apply)
      [32m+[0m[0m zone                 = "us-central1-a"

      [32m+[0m[0m boot_disk {
          [32m+[0m[0m auto_delete                = true
          [32m+[0m[0m device_name                = (known after apply)
          [32m+[0m[0m disk_encryption_key_sha256 = (known after apply)
          [32m+[0m[0m kms_key_self_link          = (known after apply)
          [32m+[0m[0m mode                       = "READ_WRITE"
          [32m+[0m[0m source                     = (known after apply)

          [32m+[0m[0m initialize_params {
              [32m+[0m[0m image  = "debian-cloud/debian-11"
              [32m+[0m[0m labels = (known after apply)
              [32m+[0m[0m size   = (known after apply)
              [32m+[0m[0m type   = (known after apply)
            }
        }

      [32m+[0m[0m network_interface {
          [32m+[0m[0m ipv6_access_type   = (known after apply)
          [32m+[0m[0m name               = (known after apply)
          [32m+[0m[0m network            = (known after apply)
          [32m+[0m[0m network_ip         = (known after apply)
          [32m+[0m[0m stack_type         = (known after apply)
          [32m+[0m[0m subnetwork         = (known after apply)
          [32m+[0m[0m subnetwork_project = (known after apply)
        }
    }

[1m  # module.gateqeeper.google_compute_network.my-vpc[0m will be created
[0m  [32m+[0m[0m resource "google_compute_network" "my-vpc" {
      [32m+[0m[0m auto_create_subnetworks                   = false
      [32m+[0m[0m delete_default_routes_on_create           = false
      [32m+[0m[0m gateway_ipv4                              = (known after apply)
      [32m+[0m[0m id                                        = (known after apply)
      [32m+[0m[0m internal_ipv6_range                       = (known after apply)
      [32m+[0m[0m mtu                                       = (known after apply)
      [32m+[0m[0m name                                      = "terraform-vpc"
      [32m+[0m[0m network_firewall_policy_enforcement_order = "AFTER_CLASSIC_FIREWALL"
      [32m+[0m[0m project                                   = "my-project-1575722702982"
      [32m+[0m[0m routing_mode                              = "GLOBAL"
      [32m+[0m[0m self_link                                 = (known after apply)
    }

[1m  # module.gateqeeper.google_compute_router.router[0m will be created
[0m  [32m+[0m[0m resource "google_compute_router" "router" {
      [32m+[0m[0m creation_timestamp = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m name               = "terraform-router-1"
      [32m+[0m[0m network            = (known after apply)
      [32m+[0m[0m project            = "my-project-1575722702982"
      [32m+[0m[0m region             = "us-central1"
      [32m+[0m[0m self_link          = (known after apply)
    }

[1m  # module.gateqeeper.google_compute_router_nat.cloud-router-nat[0m will be created
[0m  [32m+[0m[0m resource "google_compute_router_nat" "cloud-router-nat" {
      [32m+[0m[0m enable_dynamic_port_allocation      = (known after apply)
      [32m+[0m[0m enable_endpoint_independent_mapping = true
      [32m+[0m[0m icmp_idle_timeout_sec               = 30
      [32m+[0m[0m id                                  = (known after apply)
      [32m+[0m[0m name                                = "cloud-router-nat"
      [32m+[0m[0m nat_ip_allocate_option              = "AUTO_ONLY"
      [32m+[0m[0m project                             = "my-project-1575722702982"
      [32m+[0m[0m region                              = "us-central1"
      [32m+[0m[0m router                              = "terraform-router-1"
      [32m+[0m[0m source_subnetwork_ip_ranges_to_nat  = "ALL_SUBNETWORKS_ALL_IP_RANGES"
      [32m+[0m[0m tcp_established_idle_timeout_sec    = 1200
      [32m+[0m[0m tcp_transitory_idle_timeout_sec     = 30
      [32m+[0m[0m udp_idle_timeout_sec                = 30
    }

[1m  # module.gateqeeper.google_compute_security_policy.cloud-armor-policy[0m will be created
[0m  [32m+[0m[0m resource "google_compute_security_policy" "cloud-armor-policy" {
      [32m+[0m[0m fingerprint = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "cloud-armor-policy-dev"
      [32m+[0m[0m project     = "my-project-1575722702982"
      [32m+[0m[0m self_link   = (known after apply)
      [32m+[0m[0m type        = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m action      = "allow"
          [32m+[0m[0m description = "default rule"
          [32m+[0m[0m preview     = (known after apply)
          [32m+[0m[0m priority    = 2147483647

          [32m+[0m[0m match {
              [32m+[0m[0m versioned_expr = "SRC_IPS_V1"

              [32m+[0m[0m config {
                  [32m+[0m[0m src_ip_ranges = [
                      [32m+[0m[0m "*",
                    ]
                }
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m action      = "deny(403)"
          [32m+[0m[0m description = "Deny access to IPs in 103.126.7.151/32"
          [32m+[0m[0m preview     = (known after apply)
          [32m+[0m[0m priority    = 1000

          [32m+[0m[0m match {
              [32m+[0m[0m versioned_expr = "SRC_IPS_V1"

              [32m+[0m[0m config {
                  [32m+[0m[0m src_ip_ranges = [
                      [32m+[0m[0m "103.126.7.151/32",
                    ]
                }
            }
        }
      [32m+[0m[0m rule {
          [32m+[0m[0m action   = "rate_based_ban"
          [32m+[0m[0m preview  = true
          [32m+[0m[0m priority = 1002

          [32m+[0m[0m match {
              [32m+[0m[0m versioned_expr = "SRC_IPS_V1"

              [32m+[0m[0m config {
                  [32m+[0m[0m src_ip_ranges = [
                      [32m+[0m[0m "*",
                    ]
                }
            }

          [32m+[0m[0m rate_limit_options {
              [32m+[0m[0m ban_duration_sec = 60
              [32m+[0m[0m conform_action   = "allow"
              [32m+[0m[0m enforce_on_key   = "ALL"
              [32m+[0m[0m exceed_action    = "deny(403)"

              [32m+[0m[0m rate_limit_threshold {
                  [32m+[0m[0m count        = 10
                  [32m+[0m[0m interval_sec = 60
                }
            }
        }
    }

[1m  # module.gateqeeper.google_compute_subnetwork.private-subnet[0m will be created
[0m  [32m+[0m[0m resource "google_compute_subnetwork" "private-subnet" {
      [32m+[0m[0m creation_timestamp         = (known after apply)
      [32m+[0m[0m external_ipv6_prefix       = (known after apply)
      [32m+[0m[0m fingerprint                = (known after apply)
      [32m+[0m[0m gateway_address            = (known after apply)
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m ip_cidr_range              = "10.5.0.0/16"
      [32m+[0m[0m ipv6_cidr_range            = (known after apply)
      [32m+[0m[0m name                       = "terraform-private-subnet"
      [32m+[0m[0m network                    = (known after apply)
      [32m+[0m[0m private_ip_google_access   = true
      [32m+[0m[0m private_ipv6_google_access = (known after apply)
      [32m+[0m[0m project                    = "my-project-1575722702982"
      [32m+[0m[0m purpose                    = (known after apply)
      [32m+[0m[0m region                     = "us-central1"
      [32m+[0m[0m secondary_ip_range         = [
          [32m+[0m[0m {
              [32m+[0m[0m ip_cidr_range = "192.168.0.0/16"
              [32m+[0m[0m range_name    = "k8s-pod-range"
            },
          [32m+[0m[0m {
              [32m+[0m[0m ip_cidr_range = "192.169.0.0/18"
              [32m+[0m[0m range_name    = "k8s-service-range"
            },
        ]
      [32m+[0m[0m self_link                  = (known after apply)
      [32m+[0m[0m stack_type                 = (known after apply)
    }

[1m  # module.gateqeeper.google_container_cluster.cluster1[0m will be created
[0m  [32m+[0m[0m resource "google_container_cluster" "cluster1" {
      [32m+[0m[0m cluster_ipv4_cidr           = (known after apply)
      [32m+[0m[0m datapath_provider           = (known after apply)
      [32m+[0m[0m default_max_pods_per_node   = (known after apply)
      [32m+[0m[0m enable_binary_authorization = false
      [32m+[0m[0m enable_intranode_visibility = (known after apply)
      [32m+[0m[0m enable_kubernetes_alpha     = false
      [32m+[0m[0m enable_l4_ilb_subsetting    = false
      [32m+[0m[0m enable_legacy_abac          = false
      [32m+[0m[0m enable_shielded_nodes       = true
      [32m+[0m[0m endpoint                    = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m initial_node_count          = 1
      [32m+[0m[0m label_fingerprint           = (known after apply)
      [32m+[0m[0m location                    = "us-central1-a"
      [32m+[0m[0m logging_service             = (known after apply)
      [32m+[0m[0m master_version              = (known after apply)
      [32m+[0m[0m monitoring_service          = (known after apply)
      [32m+[0m[0m name                        = "terraform-gke-cluster"
      [32m+[0m[0m network                     = (known after apply)
      [32m+[0m[0m networking_mode             = "VPC_NATIVE"
      [32m+[0m[0m node_locations              = (known after apply)
      [32m+[0m[0m node_version                = (known after apply)
      [32m+[0m[0m operation                   = (known after apply)
      [32m+[0m[0m private_ipv6_google_access  = (known after apply)
      [32m+[0m[0m project                     = (known after apply)
      [32m+[0m[0m remove_default_node_pool    = true
      [32m+[0m[0m self_link                   = (known after apply)
      [32m+[0m[0m services_ipv4_cidr          = (known after apply)
      [32m+[0m[0m subnetwork                  = (known after apply)
      [32m+[0m[0m tpu_ipv4_cidr_block         = (known after apply)

      [32m+[0m[0m ip_allocation_policy {
          [32m+[0m[0m cluster_ipv4_cidr_block       = (known after apply)
          [32m+[0m[0m cluster_secondary_range_name  = "k8s-pod-range"
          [32m+[0m[0m services_ipv4_cidr_block      = (known after apply)
          [32m+[0m[0m services_secondary_range_name = "k8s-service-range"
        }

      [32m+[0m[0m private_cluster_config {
          [32m+[0m[0m enable_private_nodes   = true
          [32m+[0m[0m master_ipv4_cidr_block = "172.168.0.0/28"
          [32m+[0m[0m peering_name           = (known after apply)
          [32m+[0m[0m private_endpoint       = (known after apply)
          [32m+[0m[0m public_endpoint        = (known after apply)
        }
    }

[1m  # module.gateqeeper.google_container_node_pool.my-node-pool[0m will be created
[0m  [32m+[0m[0m resource "google_container_node_pool" "my-node-pool" {
      [32m+[0m[0m cluster                     = "terraform-gke-cluster"
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m initial_node_count          = (known after apply)
      [32m+[0m[0m instance_group_urls         = (known after apply)
      [32m+[0m[0m location                    = "us-central1-a"
      [32m+[0m[0m managed_instance_group_urls = (known after apply)
      [32m+[0m[0m max_pods_per_node           = 20
      [32m+[0m[0m name                        = "nodepool1-dev"
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m node_count                  = 2
      [32m+[0m[0m node_locations              = (known after apply)
      [32m+[0m[0m operation                   = (known after apply)
      [32m+[0m[0m project                     = (known after apply)
      [32m+[0m[0m version                     = (known after apply)

      [32m+[0m[0m node_config {
          [32m+[0m[0m disk_size_gb      = (known after apply)
          [32m+[0m[0m disk_type         = (known after apply)
          [32m+[0m[0m guest_accelerator = (known after apply)
          [32m+[0m[0m image_type        = (known after apply)
          [32m+[0m[0m labels            = (known after apply)
          [32m+[0m[0m local_ssd_count   = (known after apply)
          [32m+[0m[0m logging_variant   = "DEFAULT"
          [32m+[0m[0m machine_type      = "e2-small"
          [32m+[0m[0m metadata          = {
              [32m+[0m[0m "disable-legacy-endpoints" = "true"
            }
          [32m+[0m[0m min_cpu_platform  = (known after apply)
          [32m+[0m[0m oauth_scopes      = [
              [32m+[0m[0m "https://www.googleapis.com/auth/cloud-platform",
              [32m+[0m[0m "https://www.googleapis.com/auth/compute",
              [32m+[0m[0m "https://www.googleapis.com/auth/devstorage.read_only",
              [32m+[0m[0m "https://www.googleapis.com/auth/logging.write",
              [32m+[0m[0m "https://www.googleapis.com/auth/monitoring",
            ]
          [32m+[0m[0m preemptible       = true
          [32m+[0m[0m service_account   = "terraform-sa@my-project-1575722702982.iam.gserviceaccount.com"
          [32m+[0m[0m spot              = false
          [32m+[0m[0m taint             = (known after apply)
        }
    }

[1m  # module.gateqeeper.google_container_node_pool.my-node-pool2[0m will be created
[0m  [32m+[0m[0m resource "google_container_node_pool" "my-node-pool2" {
      [32m+[0m[0m cluster                     = "terraform-gke-cluster"
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m initial_node_count          = (known after apply)
      [32m+[0m[0m instance_group_urls         = (known after apply)
      [32m+[0m[0m location                    = "us-central1-a"
      [32m+[0m[0m managed_instance_group_urls = (known after apply)
      [32m+[0m[0m max_pods_per_node           = 20
      [32m+[0m[0m name                        = "nodepool2-dev"
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m node_count                  = 1
      [32m+[0m[0m node_locations              = (known after apply)
      [32m+[0m[0m operation                   = (known after apply)
      [32m+[0m[0m project                     = (known after apply)
      [32m+[0m[0m version                     = (known after apply)

      [32m+[0m[0m node_config {
          [32m+[0m[0m disk_size_gb      = (known after apply)
          [32m+[0m[0m disk_type         = (known after apply)
          [32m+[0m[0m guest_accelerator = (known after apply)
          [32m+[0m[0m image_type        = (known after apply)
          [32m+[0m[0m labels            = (known after apply)
          [32m+[0m[0m local_ssd_count   = (known after apply)
          [32m+[0m[0m logging_variant   = "DEFAULT"
          [32m+[0m[0m machine_type      = "e2-small"
          [32m+[0m[0m metadata          = {
              [32m+[0m[0m "disable-legacy-endpoints" = "true"
            }
          [32m+[0m[0m min_cpu_platform  = (known after apply)
          [32m+[0m[0m oauth_scopes      = [
              [32m+[0m[0m "https://www.googleapis.com/auth/cloud-platform",
              [32m+[0m[0m "https://www.googleapis.com/auth/compute",
              [32m+[0m[0m "https://www.googleapis.com/auth/devstorage.read_only",
              [32m+[0m[0m "https://www.googleapis.com/auth/logging.write",
              [32m+[0m[0m "https://www.googleapis.com/auth/monitoring",
            ]
          [32m+[0m[0m preemptible       = true
          [32m+[0m[0m service_account   = "terraform-sa@my-project-1575722702982.iam.gserviceaccount.com"
          [32m+[0m[0m spot              = false
          [32m+[0m[0m taint             = (known after apply)
        }
    }

[1m  # module.gateqeeper.google_redis_instance.redis[0m will be created
[0m  [32m+[0m[0m resource "google_redis_instance" "redis" {
      [32m+[0m[0m alternative_location_id  = (known after apply)
      [32m+[0m[0m auth_enabled             = false
      [32m+[0m[0m auth_string              = (sensitive value)
      [32m+[0m[0m authorized_network       = (known after apply)
      [32m+[0m[0m connect_mode             = "DIRECT_PEERING"
      [32m+[0m[0m create_time              = (known after apply)
      [32m+[0m[0m current_location_id      = (known after apply)
      [32m+[0m[0m host                     = (known after apply)
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m location_id              = (known after apply)
      [32m+[0m[0m memory_size_gb           = 2
      [32m+[0m[0m name                     = "redis-instance-suneesh-dev"
      [32m+[0m[0m nodes                    = (known after apply)
      [32m+[0m[0m persistence_iam_identity = (known after apply)
      [32m+[0m[0m port                     = (known after apply)
      [32m+[0m[0m project                  = "my-project-1575722702982"
      [32m+[0m[0m read_endpoint            = (known after apply)
      [32m+[0m[0m read_endpoint_port       = (known after apply)
      [32m+[0m[0m read_replicas_mode       = (known after apply)
      [32m+[0m[0m redis_version            = "REDIS_6_X"
      [32m+[0m[0m region                   = "us-central1"
      [32m+[0m[0m replica_count            = (known after apply)
      [32m+[0m[0m reserved_ip_range        = (known after apply)
      [32m+[0m[0m secondary_ip_range       = (known after apply)
      [32m+[0m[0m server_ca_certs          = (known after apply)
      [32m+[0m[0m tier                     = "BASIC"
      [32m+[0m[0m transit_encryption_mode  = "DISABLED"
    }

[1m  # module.gateqeeper.google_service_networking_connection.private_vpc_connection[0m will be created
[0m  [32m+[0m[0m resource "google_service_networking_connection" "private_vpc_connection" {
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m network                 = (known after apply)
      [32m+[0m[0m peering                 = (known after apply)
      [32m+[0m[0m reserved_peering_ranges = [
          [32m+[0m[0m "ip-for-nat",
        ]
      [32m+[0m[0m service                 = "servicenetworking.googleapis.com"
    }

[1m  # module.gateqeeper.google_sql_database_instance.my-sql-instance[0m will be created
[0m  [32m+[0m[0m resource "google_sql_database_instance" "my-sql-instance" {
      [32m+[0m[0m available_maintenance_versions = (known after apply)
      [32m+[0m[0m connection_name                = (known after apply)
      [32m+[0m[0m database_version               = "MYSQL_5_7"
      [32m+[0m[0m deletion_protection            = false
      [32m+[0m[0m encryption_key_name            = (known after apply)
      [32m+[0m[0m first_ip_address               = (known after apply)
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m ip_address                     = (known after apply)
      [32m+[0m[0m maintenance_version            = (known after apply)
      [32m+[0m[0m master_instance_name           = (known after apply)
      [32m+[0m[0m name                           = "cloud-sql-dev"
      [32m+[0m[0m private_ip_address             = (known after apply)
      [32m+[0m[0m project                        = (known after apply)
      [32m+[0m[0m public_ip_address              = (known after apply)
      [32m+[0m[0m region                         = "us-central1"
      [32m+[0m[0m self_link                      = (known after apply)
      [32m+[0m[0m server_ca_cert                 = (known after apply)
      [32m+[0m[0m service_account_email_address  = (known after apply)

      [32m+[0m[0m settings {
          [32m+[0m[0m activation_policy     = "ALWAYS"
          [32m+[0m[0m availability_type     = "ZONAL"
          [32m+[0m[0m connector_enforcement = (known after apply)
          [32m+[0m[0m disk_autoresize       = true
          [32m+[0m[0m disk_autoresize_limit = 0
          [32m+[0m[0m disk_size             = 10
          [32m+[0m[0m disk_type             = "PD_SSD"
          [32m+[0m[0m pricing_plan          = "PER_USE"
          [32m+[0m[0m tier                  = "db-f1-micro"
          [32m+[0m[0m user_labels           = (known after apply)
          [32m+[0m[0m version               = (known after apply)

          [32m+[0m[0m ip_configuration {
              [32m+[0m[0m ipv4_enabled    = false
              [32m+[0m[0m private_network = (known after apply)
              [32m+[0m[0m require_ssl     = false
            }
        }
    }

[1m  # module.gateqeeper.google_sql_user.db-user[0m will be created
[0m  [32m+[0m[0m resource "google_sql_user" "db-user" {
      [32m+[0m[0m host                    = "terraform-private-subnet"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m instance                = "cloud-sql-dev"
      [32m+[0m[0m name                    = "suneesh"
      [32m+[0m[0m password                = (sensitive value)
      [32m+[0m[0m project                 = "my-project-1575722702982"
      [32m+[0m[0m sql_server_user_details = (known after apply)
    }

[1mPlan:[0m 17 to add, 0 to change, 0 to destroy.
[0m